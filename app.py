# -*- coding: utf-8 -*-
"""CNN_Salinan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w_VL3_RGfW53KzUS6T36RnMn9BeZ1sxC

# Deploy **Streamlit**
"""

import streamlit as st
import numpy as np
import tensorflow as tf
from PIL import Image
import base64

# Styling modern pakai CSS
st.markdown("""
    <style>
    .title {
        font-size: 32px;
        font-weight: 700;
        color: #2c3e50;
        text-align: center;
        margin-bottom: 20px;
    }
    .subtitle {
        font-size: 16px;
        text-align: center;
        color: #34495e;
        margin-bottom: 20px;
    }
    .footer {
        text-align: center;
        font-size: 13px;
        color: #95a5a6;
        margin-top: 40px;
    }
    .stButton>button {
        background-color: #3498db;
        color: white;
        border-radius: 8px;
        padding: 0.5rem 1.5rem;
        border: none;
        font-weight: bold;
    }
    .stButton>button:hover {
        background-color: #2980b9;
        color: white;
    }
    </style>
""", unsafe_allow_html=True)

# Judul aplikasi
st.set_page_config(page_title="Klasifikasi Cedera Ringan", layout="centered")
st.markdown('<div class="title">ðŸ“· Klasifikasi Cedera Ringan</div>', unsafe_allow_html=True)
st.markdown('<div class="subtitle">Upload atau ambil gambar cedera (lecet, memar, bengkak)</div>', unsafe_allow_html=True)

# Load model
@st.cache_resource
def load_model():
    model = tf.keras.models.load_model("mobilenet_cnn_model.h5")  # ganti path sesuai tempat file .h5 disimpan
    return model

model = load_model()

# Label sesuai urutan folder training
label_map = ['bengkak', 'lecet', 'memar']  # URUTANNYA HARUS BENAR sesuai train_ds.class_names

# Saran penanganan berdasarkan jenis luka
def saran_penanganan(label):
    if label == 'lecet':
        return (
            "ðŸ©¹ Saran: Bersihkan luka dengan air bersih dan sabun, keringkan, lalu oleskan antiseptik ringan. "
            "Tutup dengan perban steril jika perlu. Hindari menggaruk luka. "
            "Jika luka membengkak atau bernanah, atau tidak sembuh setelah beberapa hari, segera konsultasikan ke dokter."
        )
    elif label == 'memar':
        return (
            "ðŸ§Š Saran: Kompres area memar dengan es selama 10â€“15 menit tiap beberapa jam di hari pertama. "
            "Jaga agar bagian tersebut tidak terbentur lagi. "
            "Jika memar membesar atau sangat nyeri, atau tidak kunjung membaik, segera periksakan diri ke dokter."
        )
    elif label == 'bengkak':
        return (
            "ðŸ§Š Saran: Istirahatkan area yang bengkak, kompres dengan es, dan angkat bagian tubuh yang bengkak lebih tinggi dari jantung. "
            "Jika bengkak tidak kunjung reda dalam 1â€“2 hari atau semakin parah, segera periksakan diri ke dokter."
        )
    else:
        return "Saran tidak tersedia untuk jenis luka ini."

# Upload gambar
uploaded_file = st.file_uploader("Pilih gambar luka (JPG/PNG)", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    # Baca dan tampilkan gambar
    img = Image.open(uploaded_file)
    st.image(img, caption='Gambar yang diupload', use_container_width=True)

    # Preprocess gambar
    img = img.resize((224, 224))  # harus sama seperti saat training
    img_array = np.array(img) / 255.0
    if img_array.shape[-1] == 4:
        img_array = img_array[..., :3]  # buang alpha channel kalau ada
    img_array = np.expand_dims(img_array, axis=0)

    # Prediksi
    prediction = model.predict(img_array)
    pred_index = np.argmax(prediction[0])
    confidence = np.max(prediction[0]) * 100
    label = label_map[pred_index]

    # Tampilkan hasil prediksi
    st.success(f"Hasil Prediksi: {label.capitalize()} ({confidence:.2f}%)")
    
    # Tampilkan saran berdasarkan hasil prediksi
    st.info(saran_penanganan(label))
